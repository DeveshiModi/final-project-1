{"ast":null,"code":"/**\n * Custom hook for generating color palettes using the backend API.\n * Handles state, API calls, error handling, and persistence to localStorage.\n */import{useState,useCallback,useEffect,useMemo}from\"react\";const useColorGeneration=()=>{// State for the generated color palette\nconst[colors,setColors]=useState([]);// State for loading indicator\nconst[loading,setLoading]=useState(false);// State for error messages\nconst[error,setError]=useState(null);// State for the last used prompt\nconst[lastPrompt,setLastPrompt]=useState(\"\");// State for the last used style\nconst[lastStyle,setLastStyle]=useState(\"modern\");// Memoize the API endpoint for performance\nconst API_URL=process.env.REACT_APP_API_URL||'http://localhost:5001';/**\n   * Fetches a color palette from the backend API using the provided prompt and style.\n   * Handles loading and error state.\n   */const fetchColorsFromGemini=useCallback(async(prompt,style)=>{try{setLoading(true);setError(null);const response=await fetch(\"\".concat(API_URL,\"/api/colors\"),{method:\"POST\",headers:{\"Content-Type\":\"application/json\"},body:JSON.stringify({prompt,style})});if(!response.ok){throw new Error(\"HTTP error! status: \".concat(response.status));}const data=await response.json();if(!data.colors||!Array.isArray(data.colors)){throw new Error(\"Invalid response format from server\");}setColors(data.colors);setLastPrompt(prompt);setLastStyle(style);}catch(err){console.error(\"Error fetching colors:\",err);setError(err.message||\"Failed to generate colors\");setColors([]);}finally{setLoading(false);}},[API_URL]);/**\n   * Generates a color palette based on the user's prompt and style.\n   * Validates input and delegates to fetchColorsFromGemini.\n   */const generateColors=useCallback(async function(prompt){let style=arguments.length>1&&arguments[1]!==undefined?arguments[1]:'modern';if(!prompt.trim()){setError(\"Please enter a prompt\");return;}await fetchColorsFromGemini(prompt,style);},[fetchColorsFromGemini]);// Save colors, prompt, and style to localStorage whenever they change\nuseEffect(()=>{if(colors.length>0){localStorage.setItem('lastGeneratedColors',JSON.stringify(colors));localStorage.setItem('lastPrompt',lastPrompt);localStorage.setItem('lastStyle',lastStyle);}},[colors,lastPrompt,lastStyle]);// Memoize the return value to prevent unnecessary re-renders\nreturn useMemo(()=>({colors,loading,error,generateColors,lastPrompt,lastStyle}),[colors,loading,error,generateColors,lastPrompt,lastStyle]);};export default useColorGeneration;","map":{"version":3,"names":["useState","useCallback","useEffect","useMemo","useColorGeneration","colors","setColors","loading","setLoading","error","setError","lastPrompt","setLastPrompt","lastStyle","setLastStyle","API_URL","process","env","REACT_APP_API_URL","fetchColorsFromGemini","prompt","style","response","fetch","concat","method","headers","body","JSON","stringify","ok","Error","status","data","json","Array","isArray","err","console","message","generateColors","arguments","length","undefined","trim","localStorage","setItem"],"sources":["/Users/devm/final-project-1/src/components/hooks/useColorGeneration.js"],"sourcesContent":["/**\n * Custom hook for generating color palettes using the backend API.\n * Handles state, API calls, error handling, and persistence to localStorage.\n */\nimport { useState, useCallback, useEffect, useMemo } from \"react\";\n\nconst useColorGeneration = () => {\n  // State for the generated color palette\n  const [colors, setColors] = useState([]);\n  // State for loading indicator\n  const [loading, setLoading] = useState(false);\n  // State for error messages\n  const [error, setError] = useState(null);\n  // State for the last used prompt\n  const [lastPrompt, setLastPrompt] = useState(\"\");\n  // State for the last used style\n  const [lastStyle, setLastStyle] = useState(\"modern\");\n\n  // Memoize the API endpoint for performance\n  const API_URL = process.env.REACT_APP_API_URL || 'http://localhost:5001';\n\n  /**\n   * Fetches a color palette from the backend API using the provided prompt and style.\n   * Handles loading and error state.\n   */\n  const fetchColorsFromGemini = useCallback(async (prompt, style) => {\n    try {\n      setLoading(true);\n      setError(null);\n      const response = await fetch(`${API_URL}/api/colors`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({ prompt, style }),\n      });\n\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n\n      const data = await response.json();\n      if (!data.colors || !Array.isArray(data.colors)) {\n        throw new Error(\"Invalid response format from server\");\n      }\n\n      setColors(data.colors);\n      setLastPrompt(prompt);\n      setLastStyle(style);\n    } catch (err) {\n      console.error(\"Error fetching colors:\", err);\n      setError(err.message || \"Failed to generate colors\");\n      setColors([]);\n    } finally {\n      setLoading(false);\n    }\n  }, [API_URL]);\n\n  /**\n   * Generates a color palette based on the user's prompt and style.\n   * Validates input and delegates to fetchColorsFromGemini.\n   */\n  const generateColors = useCallback(\n    async (prompt, style = 'modern') => {\n      if (!prompt.trim()) {\n        setError(\"Please enter a prompt\");\n        return;\n      }\n      await fetchColorsFromGemini(prompt, style);\n    },\n    [fetchColorsFromGemini]\n  );\n\n  // Save colors, prompt, and style to localStorage whenever they change\n  useEffect(() => {\n    if (colors.length > 0) {\n      localStorage.setItem('lastGeneratedColors', JSON.stringify(colors));\n      localStorage.setItem('lastPrompt', lastPrompt);\n      localStorage.setItem('lastStyle', lastStyle);\n    }\n  }, [colors, lastPrompt, lastStyle]);\n\n  // Memoize the return value to prevent unnecessary re-renders\n  return useMemo(\n    () => ({\n      colors,\n      loading,\n      error,\n      generateColors,\n      lastPrompt,\n      lastStyle,\n    }),\n    [colors, loading, error, generateColors, lastPrompt, lastStyle]\n  );\n};\n\nexport default useColorGeneration; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}